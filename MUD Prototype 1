using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MUD_Prototype_Mk1
{
    public enum Actions
    {
        Move,
        North,
        South,
        West,
        East,
        Look,
        Get
    }
    public class item
    {
        public string description;
        public bool obtainable;
    }
    public class room
    {
        public string name;
        public string description;
        public room n;
        public room s;
        public room w;
        public room e;
        public List<item> objects;

        public room move(Actions direction)
        {
            switch (direction)
            {
                case Actions.North:
                    return this.n;
                case Actions.South:
                    return this.s;
                case Actions.West:
                    return this.w;
                case Actions.East:
                    return this.e;
                default:
                    return null;
            }
        }
    } 

    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<string, Actions> Command = new Dictionary<string, Actions>(StringComparer.CurrentCultureIgnoreCase)
            {
                {"move", Actions.Move},
                {"look", Actions.Look}
            };
            Dictionary<string, Actions> moveCommands = new Dictionary<string, Actions>(StringComparer.CurrentCultureIgnoreCase){
                {"n", Actions.North },
                {"s", Actions.South },
                {"w", Actions.West },
                {"e", Actions.East }
            };
            room entrance = CreateA();
            room current = entrance;
            while (true)
            {
                write(ConsoleColor.Green, current.name);
                Console.WriteLine(current.description);
                Console.WriteLine("Type in your action");
                string input = Console.ReadLine();
                Actions act;
                while (string.IsNullOrEmpty(input) || !Command.TryGetValue(input.Split(' ')[0],out act))
                {
                    write(ConsoleColor.Red, "Invalid Input.");
                    input = Console.ReadLine();
                }
                string command = input.Split(' ')[0];
                string parameter = string.Empty;
                if (command.Length != input.Length)
                {
                    parameter = input.Substring(command.Length + 1);
                }
                switch (act)
                {
                    case Actions.Move:
                        Actions dir;
                        if (!moveCommands.TryGetValue(parameter, out dir))
                        {
                            write(ConsoleColor.Red, "Invalid Paremeter");
                        }
                        else
                        {
                            room targetRoom = current.move(dir);
                            if (targetRoom != null)
                            {
                                current = targetRoom;
                            }
                        }

                        break;


                    case Actions.Look:
                        Console.WriteLine(current.description);
                        break;
                }
            }
        }

        public static room CreateA()
        {
            var entrance = new room
            {
                description = "You enter room A",
                name = "entrance",
                
                e = new room
                {
                    name = "room B",
                    description = "this is the end of the room",
                    
                }
            };
            room current = entrance;
            while(current.e != null)
            {
                current.e.w = current;
                current = current.e;
            }
            return entrance;
        }

        public static void write (ConsoleColor color, string text)
        {
            Console.ForegroundColor = color;
            Console.WriteLine(text);
            Console.ResetColor();
        }
    }
}
